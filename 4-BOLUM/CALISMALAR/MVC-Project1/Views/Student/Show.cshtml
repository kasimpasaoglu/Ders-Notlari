@model List<VM.Student>

<div class="m-6 mx-auto text-center max-w-7xl">
    <table class="w-full text-center border border-collapse table-auto border-navyBlue">
        <thead>
            <tr>
                <th><input type="number" name="Id" class="w-full p-2 border border-navyBlue" placeholder="Id"></input>
                </th>
                <th><input type="text" name="Name" class="w-full p-2 border border-navyBlue" placeholder="Name"></input>
                </th>
                <th><input type="text" name="LastName" class="w-full p-2 border border-navyBlue"
                        placeholder="Lastname"></input>
                </th>
                <th><input type="email" name="Email" class="w-full p-2 border border-navyBlue"
                        placeholder="E-Mail"></input></th>
                <th><input type="number" name="Phone" class="w-full p-2 border border-navyBlue"
                        placeholder="Phone"></input></th>
                <th><input type="number" name="CitizenshipId" class="w-full p-2 border border-navyBlue"
                        placeholder="Citizenship Id"></input>
                </th>
                <th><input name="BirthDate" class="w-full p-2 border border-navyBlue" placeholder="Birth Date"></input>
                </th>
                <th><input name="RegDate" class="w-full p-2 border border-navyBlue"
                        placeholder="Registration Date"></input>
                </th>
            </tr>
            <tr class="bg-navyBlue text-aqua">
                <th class="px-2 py-4 border border-aqua">
                    ID
                    <button class="self-end duration-200 rotate-90" type="button"
                        onclick="toggleSort(0, event, 'number')">
                        <->
                    </button>
                </th>
                <th class="px-2 py-4 border border-aqua">
                    NAME
                    <button class="self-end duration-200 rotate-90" type="button"
                        onclick="toggleSort(1, event, 'string')">
                        <->
                    </button>
                </th>
                <th class="px-2 py-4 border border-aqua">
                    LASTNAME
                    <button class="self-end duration-200 rotate-90" type="button"
                        onclick="toggleSort(2, event, 'string')">
                        <->
                    </button>
                </th>
                <th class="px-2 py-4 border border-aqua">
                    EMAIL
                    <button class="self-end duration-200 rotate-90" type="button"
                        onclick="toggleSort(3, event, 'string')">
                        <->
                    </button>
                </th>
                <th class="px-2 py-4 border border-aqua">
                    PHONE
                    <button class="self-end duration-200 rotate-90" type="button"
                        onclick="toggleSort(4, event, 'number')">
                        <->
                    </button>
                </th>
                <th class="px-2 py-4 border border-aqua">
                    CITIZENSHIP ID
                    <button class="self-end duration-200 rotate-90" type="button"
                        onclick="toggleSort(5, event, 'string')">
                        <->
                    </button>
                </th>
                <th class="px-2 py-4 border border-aqua">
                    BIRTH DATE
                    <button class="self-end duration-200 rotate-90" type="button"
                        onclick="toggleSort(6, event, 'date')">
                        <->
                    </button>
                </th>
                <th class="px-2 py-4 border border-aqua">
                    REGISTRATION DATE
                    <button class="self-end duration-200 rotate-90" type="button"
                        onclick="toggleSort(7, event, 'date')">
                        <->
                    </button>
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var student in Model)
            {
                <tr>
                    <td class="p-2 border border-navyBlue">@student.Id</td>
                    <td class="p-2 border border-navyBlue">@student.Name</td>
                    <td class="p-2 border border-navyBlue">@student.LastName</td>
                    <td class="p-2 border border-navyBlue">@student.Email</td>
                    <td class="p-2 border border-navyBlue">@student.Phone</td>
                    <td class="p-2 border border-navyBlue">@student.CitizenshipId</td>
                    <td class="p-2 border border-navyBlue">@student.BirthDate.ToShortDateString()</td>
                    <td class="p-2 border border-navyBlue">@student.RegDate.ToString("yyyy-MM-dd HH:mm")</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<script>
    const sortStates = {}; // siralama durumlarini bu dizide sakliyo
    function toggleSort(columnIndex, event, dataType) {

        // eger gelen columnIndex'teki state durumu tanimlanmamissa, ilk kez buttona basiliyor
        if (sortStates[columnIndex] === undefined) {
            sortStates[columnIndex] = true; // true olarak isaretle
        }
        else { // eger bos degilse, o zaman icinde true ve ya false bir deger var demektir.
            sortStates[columnIndex] = !sortStates[columnIndex]; // icindeki degeri tersine cevir
        }

        const isAscending = sortStates[columnIndex]; // state listesinden gelen degeri tut
        const table = document.querySelector("tbody"); // tabloyu yakala
        const rows = Array.from(table.rows); // tablonun satirlarindan bir array olustur

        // siralama islemini yap. sort fonksiyonu bubble sorting yapiyor, a-b iki farkli satiri temsil editor
        rows.sort((a, b) => {
            const aText = a.cells[columnIndex].innerText.trim(); // a satirindaki indexi verilen kolondaki metni al
            const bText = b.cells[columnIndex].innerText.trim(); // b satirindaki ayni indexteki kolonun icindek metni al
            if (dataType === "number") {
                return sortNumbers(aText, bText, isAscending);
            } else if (dataType === "date") {
                return sortDates(aText, bText, isAscending);
            } else {
                return sortStrings(aText, bText, isAscending);
            }


        });
        event.target.classList.toggle('rotate-90')
        event.target.classList.toggle('-rotate-90')

        rows.forEach(row => table.appendChild(row));
    }



    function sortStrings(aText, bText, isAscending) {
        return isAscending
            ? aText.localeCompare(bText) // Artan sıralama
            : bText.localeCompare(aText); // Azalan sıralama
    }
    function sortNumbers(aText, bText, isAscending) {
        const aValue = parseFloat(aText); // Sayıya dönüştür
        const bValue = parseFloat(bText); // Sayıya dönüştür
        return isAscending
            ? aValue - bValue // Artan sıralama
            : bValue - aValue; // Azalan sıralama
    }
    function sortDates(aText, bText, isAscending) {
        const aDate = new Date(aText); // Tarih nesnesine dönüştür
        const bDate = new Date(bText); // Tarih nesnesine dönüştür
        return isAscending
            ? aDate - bDate // Artan sıralama
            : bDate - aDate; // Azalan sıralama
    }

</script>
<script>
    function filterTable() {
        const table = document.querySelector("tbody"); // tablodaki satirlari bul
        const rows = Array.from(table.rows); // satirlari diziye cevir
        const filters = {}; // filtreyi saklayacagimiz obje. her bir sutun icin yazilan degeri key,value olarak tutacak, ayni anda birden fazla filtre uygulanabilecek 


        document.querySelectorAll("thead input").forEach(input => {
            const columnName = input.name; // hangi kolona filtre uygulanacagini name alanindan yakala
            const filterValue = input.value.trim().toLowerCase(); // tamamini kucuk harfe cevirdikten sonra filtre degerini al
            if (filterValue) { // eger bir deger varsa (input alani bos degilse)
                filters[columnName] = filterValue; // degeri filtre objesine ekle
            }
        });


        rows.forEach(row => {
            let isVisible = true; // baslangicta gorunur halde
            Object.entries(filters).forEach(([key, value]) => { // nesneyi diziye donusturup icinde donuyoruz, key sutun adi, value fitre degeri
                const columnIndex = getColumnIndex(key); // sutunun index'ini al
                const cellValue = row.cells[columnIndex].innerText.trim().toLowerCase(); // o indexteki hucrenin degerini al
                if (!cellValue.includes(value)) {
                    isVisible = false; // eger hucrenin icinde filtre degeri yoksa gorunurlugu kaldir.
                }
            });
            row.style.display = isVisible ? "" : "none"; // satirlarin gorunurlugunu isVisible degiskenine bakarak ayarla
        });
    }

    // sutun isminin degerini index'e donustur. (aslinda gerek yok, cunku inputlar zaten belli bir indexteki kolonda duruyor, kolonun indexine bakarak ta bulabilirdim, sonradan aklima geldi)
    function getColumnIndex(columnName) {
        const columns = ["Id", "Name", "LastName", "Email", "Phone", "CitizenshipId", "BirthDate", "RegDate"];
        return columns.indexOf(columnName);
    }

    // tum input alanlarinna event listener ekle
    document.querySelectorAll("thead input").forEach(input => {
        input.addEventListener("input", filterTable); // her bir input girisinde yukardaki metod calisacak. 
    });
</script>
